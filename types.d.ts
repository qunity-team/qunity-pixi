// Generated by dts-bundle-generator v5.0.0

import PIXI from 'pixi.js';

declare class HashObject {
	private _hashCode;
	constructor();
	get hashCode(): number;
}
declare class ComponentManager {
	private _app;
	private _entityAdaptor;
	private _components;
	private _componentsNameMapping;
	private _componentsDefMapping;
	constructor(entityAdaptor: IEntityAdaptor, app: Application);
	applyProxy(): void;
	/**
	 * 遍历组件
	 * @param callback
	 */
	eachComponent(callback: (component: Component, index: number) => unknown): void;
	/**
	 * 设置激活状态
	 * @param active
	 */
	setActive(active: boolean): void;
	/**
	 * 时钟更新
	 * @param t
	 */
	onUpdate(t: number): void;
	/**
	 * 交互事件
	 */
	onInteract(type: string, e: any): void;
	/**
	 * 添加组件
	 * @param componentId
	 * @param awake
	 * @param enabled
	 */
	addComponent(componentId: any, awake?: boolean, enabled?: boolean): Component;
	/**
	 * 移除组件
	 * @param componentId
	 * @param index
	 */
	removeComponent(componentId: any, index?: number): any;
	/**
	 * 移除所有组件
	 */
	removeAllComponents(): void;
	/**
	 * 获取组件
	 * @param componentId
	 */
	getComponent(componentId: any): Component;
	/**
	 * 获取组件组
	 * @param componentId
	 */
	getComponents(componentId: any): Component[];
	/**
	 * 获取全部组件
	 */
	getAllComponents(): Component[];
	/**
	 * 添加组件
	 * @param component
	 * @param index
	 * @param awake
	 */
	private _add;
	/**
	 * 移除组件
	 * @param components
	 */
	private _remove;
	/**
	 * 移除所有组件
	 */
	private _removeAll;
	/**
	 * 根据组件名称获取指定类的组件列表
	 * @param componentId
	 */
	private _findByName;
	/**
	 * 获取指定类的组件列表
	 * @param clazz
	 */
	private _find;
	/**
	 * 获取指定类的组件
	 * @param name
	 */
	private _getByName;
	/**
	 * 获取指定类的组件
	 * @param clazz
	 */
	private _getOne;
	/**
	 * 获取所有组件
	 */
	private get all();
	/**
	 * 调用组件上的方法
	 * @param methodName
	 * @param args
	 */
	invokeOnComponents(methodName: any, args: any): void;
	/**
	 * 当添加组件时
	 * @param component
	 * @param awake
	 */
	$onAddComponent(component: Component, awake?: boolean): void;
	/**
	 * 当移除组件时
	 * @param component
	 */
	$onRemoveComponent(component: Component): void;
	$instantiateComponent(componentId: any): Component;
}
/**
 * 实体适配器接口
 */
export interface IEntityAdaptor {
	/**
	 * 组件管理实例
	 */
	readonly entity: IEntity;
	/**
	 * 实体
	 */
	readonly components: ComponentManager;
	/**
	 * 获取应用
	 */
	readonly app: Application;
	/**
	 * 获取激活状态
	 */
	getActive(): boolean;
	/**
	 * 设置激活状态
	 * @param active
	 */
	setActive(active: boolean): any;
	invokeLifecycle(type: string, ...args: any[]): any;
	invokeInteractionEvent(type: string, ...args: any[]): any;
}
export interface IComponent {
	readonly entityAdaptor: IEntityAdaptor;
	readonly entity: any;
	enabled: boolean;
	broadcast(methodName: string, ...args: any[]): any;
	bubbling(methodName: string, ...args: any[]): any;
	awake(): any;
	start(): any;
	onEnable(): any;
	onDisable(): any;
	update(delta: number): any;
	onDestroy(): any;
	onClick(e: any): any;
	onMouseDown(e: any): any;
	onMouseMove(e: any): any;
	onMouseUp(e: any): any;
	onMouseUpOutside(e: any): any;
	/**
	 * 添加组件
	 * @param componentId
	 * @param enabled
	 */
	addComponent(componentId: string | Function, enabled?: boolean): IComponent;
	/**
	 * 移除组件
	 * @param componentId
	 * @param index
	 */
	removeComponent(componentId: string | Function, index?: number): IComponent[];
	/**
	 * 移除所有组件
	 */
	removeAllComponents(): any;
	/**
	 * 获取组件
	 * @param componentId
	 */
	getComponent(componentId: string | Function): IComponent;
	/**
	 * 获取组件组
	 * @param componentId
	 */
	getComponents(componentId: string | Function): IComponent[];
	/**
	 * 获取全部组件
	 */
	getAllComponents(): IComponent[];
}
declare class Component extends HashObject implements IComponent {
	private _entityAdaptor;
	private _enabled;
	private _started;
	get entityAdaptor(): IEntityAdaptor;
	get entity(): IEntity;
	constructor();
	/**
	 * 是否有效
	 */
	get enabled(): boolean;
	set enabled(value: boolean);
	/**
	 * @private
	 */
	$awake(entityAdaptor: IEntityAdaptor): void;
	/**
	 * @private
	 */
	$destroy(): void;
	/**
	 * 当组件被唤醒时
	 */
	awake(): void;
	/**
	 * 当组件开始
	 */
	start(): void;
	/**
	 * 当生效时
	 * 仅当实体唤醒状态
	 */
	onEnable(): void;
	/**
	 * 当失效时
	 * 仅当实体唤醒状态
	 */
	onDisable(): void;
	/**
	 * 时钟更新
	 * @param delta
	 */
	update(delta: number): void;
	/**
	 * 当被销毁时
	 */
	onDestroy(): void;
	/**
	 * @private
	 * @param delta
	 */
	$onUpdate(delta: number): void;
	/**
	 * 当点击时
	 * @param e
	 */
	onClick(e: any): void;
	/**
	 * 当鼠标按下
	 * @param e
	 */
	onMouseDown(e: any): void;
	/**
	 * 当鼠标移动
	 * @param e
	 */
	onMouseMove(e: any): void;
	/**
	 * 当鼠标松开
	 * @param e
	 */
	onMouseUp(e: any): void;
	/**
	 * 当鼠标在实体外侧松开
	 * @param e
	 */
	onMouseUpOutside(e: any): void;
	/**
	 * 向下广播执行
	 * @param methodName
	 * @param args
	 */
	broadcast(methodName: string, ...args: any[]): void;
	/**
	 * 向上冒泡执行
	 * @param methodName
	 * @param args
	 */
	bubbling(methodName: string, ...args: any[]): void;
	addComponent(componentId: string | Function, enabled?: boolean): IComponent;
	getAllComponents(): IComponent[];
	getComponent(componentId: string | Function): IComponent;
	getComponents(componentId: string | Function): IComponent[];
	removeAllComponents(): any;
	removeComponent(componentId: string | Function, index?: number): IComponent[];
}
/**
 * 实体接口
 */
export interface IEntity {
	/**
	 * 激活状态
	 */
	readonly active: boolean;
	/**
	 * 舞台
	 */
	readonly stage: any;
	entityAdaptor: IEntityAdaptor;
	/**
	 * 实例化视图配置
	 * @param docConfig
	 */
	instantiate(docConfig: any): any;
	/**
	 * 设置激活状态
	 * @param active
	 */
	setActive(active: boolean): any;
	/**
	 * 添加组件
	 * @param componentId
	 * @param enabled
	 */
	addComponent(componentId: string | Function, enabled?: boolean): IComponent;
	/**
	 * 移除组件
	 * @param componentId
	 * @param index
	 */
	removeComponent(componentId: string | Function, index?: number): IComponent[];
	/**
	 * 移除所有组件
	 */
	removeAllComponents(): any;
	/**
	 * 获取组件
	 * @param componentId
	 */
	getComponent(componentId: string | Function): IComponent;
	/**
	 * 获取组件组
	 * @param componentId
	 */
	getComponents(componentId: string | Function): IComponent[];
	/**
	 * 获取全部组件
	 */
	getAllComponents(): IComponent[];
	/**
	 * 调用组件上的方法
	 * @param methodName
	 * @param args
	 */
	invokeOnComponents(methodName: any, ...args: any[]): any;
}
export interface IDoc {
	name: string;
	type: 'scene' | 'prefab';
	factory: Function;
	assets: any[];
}
export interface AdaptorOptions {
	stage: any;
	EntityAdaptor: any;
	addDisplayFunc: (node: IEntity, parent: IEntity) => void;
	traverseFunc: (node: IEntity, callback: (node: any) => boolean | void) => void;
	bubblingFunc: (node: IEntity, callback: (node: any) => boolean | void) => void;
	loadAssetFunc: (config: any, onComplete: (res: any, opt: any) => void) => void;
	protocols?: {
		[key: string]: (app: Application, key: string, value: any, pid?: number) => any;
	};
	context?: any;
}
declare class Application {
	private _launchOptions;
	private _adaptorOptions;
	private _componentDefs;
	private _entityDefs;
	private _manifest;
	private _docCaches;
	private _assetsManager;
	entityMap: {};
	/**
	 * 启动配置
	 */
	get launchOptions(): any;
	/**
	 * 适配配置
	 */
	get adaptorOptions(): AdaptorOptions;
	/**
	 * 获取上下文
	 */
	get context(): any;
	/**
	 * 舞台实例
	 */
	get stage(): any;
	constructor();
	/**
	 * 启动
	 * @param options
	 * @param onProgress
	 * @param onComplete
	 */
	launch(options?: any, onProgress?: any, onComplete?: any): void;
	/**
	 * 预加载场景
	 * @param name
	 * @param onProgress
	 * @param onComplete
	 */
	preloadScene(name: string, onProgress?: any, onComplete?: any): void;
	/**
	 * 加载场景
	 * @param name
	 * @param onProgress
	 * @param onComplete
	 */
	private loadScene;
	_instantiateScene(doc: IDoc): any;
	/**
	 * 启动场景
	 * @param name
	 * @param options
	 * @param onProgress
	 * @param onComplete
	 */
	launchScene(name: string, options?: any, onProgress?: any, onComplete?: any): void;
	/**
	 * 装配适配器
	 * @param options
	 * @return mainLoop 主循环方法
	 */
	setupAdaptor(options: AdaptorOptions): (delta: number) => void;
	/**
	 * 实例化场景或者预制体
	 * @param doc
	 */
	instantiate(doc: IDoc): any;
	/**
	 * 注册组件类
	 * @param id
	 * @param def
	 */
	registerComponentDef(id: any, def: any): void;
	/**
	 * 批量注册组件类
	 * @param defs {key: id, def}
	 */
	registerComponentDefs(defs: any): void;
	/**
	 * 注册实体类
	 * @param type
	 * @param def
	 */
	registerEntityDef(type: any, def: any): void;
	/**
	 * 批量注册实体类
	 * @param defs
	 */
	registerEntityDefs(defs: any): void;
	/**
	 * 创建实体实例
	 * @param type
	 */
	createEntity(type: string): IEntity;
	/**
	 * 获取全部已注册的实体定义
	 */
	get entityDefs(): any;
	/**
	 * 添加显示节点
	 * @param node
	 * @param parent
	 */
	addDisplayNode(node: IEntity, parent: IEntity): void;
	/**
	 * 遍历显示节点
	 * @param node
	 * @param callback
	 */
	traverseDisplayNode(node: IEntity, callback: (node: any) => boolean | void): void;
	/**
	 * 冒泡显示节点
	 * @param node
	 * @param callback
	 */
	bubblingDisplayNode(node: IEntity, callback: (node: any) => boolean | void): void;
	/**
	 * 加载单项资源
	 * @param config
	 * @param onComplete
	 */
	loadAsset(config: any, onComplete?: any): void;
	/**
	 * 加载资源
	 * @param configs
	 * @param onProgress
	 * @param onComplete
	 */
	loadAssets(configs: any, onProgress?: any, onComplete?: any): void;
	/**
	 * 获取资源
	 * @param uuid
	 */
	getAsset(uuid: string): any;
	/**
	 * 主循环方法，需要在适配器的实现中调用
	 * @param delta
	 * @private
	 */
	private _mainLoop;
	/**
	 * 遍历整个渲染树
	 * @param delta
	 * @param node
	 * @private
	 */
	private _onHit;
	/**
	 * 实例化组件
	 * @param id
	 */
	$getComponentDef(id: any): any;
}
export declare enum Resolution {
	WIDTH_FIXED = 0,
	HEIGHT_FIXED = 1
}
export interface PIXIAppOptions {
	resolution?: Resolution;
	designWidth?: number;
	designHeight?: number;
	antialias?: boolean;
	autoResize?: boolean;
}
export declare function createApp(options?: PIXIAppOptions): Application;
export interface IPixiEntity extends PIXI.Container, IEntity {
	readonly stageSize: {
		width: number;
		height: number;
	};
}
export declare type PixiEntity = IPixiEntity | PIXI.Sprite | PIXI.Text;
export declare function createEntity(type: string): IPixiEntity;
export declare class Component extends QComponent {
	get entity(): IPixiEntity;
}
/**
 * 先序遍历
 * @param node
 * @param hit
 */
export declare function traverse(node: any, hit: (node: PIXI.DisplayObject) => boolean | void): boolean | void;
/**
 * 冒泡遍历
 * @param node
 * @param hit
 */
export declare function bubbling(node: any, hit: (node: PIXI.DisplayObject) => boolean | void): boolean | void;
declare abstract class ShapeBase extends PIXI.Graphics {
	protected __fieldDirty: boolean;
	private _t;
	fillColor: any;
	fillAlpha: number;
	strokeColor: any;
	strokeAlpha: number;
	strokeWidth: number;
	strokeAlignment: number;
	shapeWidth: number;
	shapeHeight: number;
	directionLineWidth: number;
	protected _anchor: PIXI.ObservablePoint;
	get anchor(): PIXI.ObservablePoint;
	set anchor(value: PIXI.ObservablePoint);
	get anchorOffset(): {
		x: number;
		y: number;
	};
	constructor();
	private _onAnchorUpdate;
	private $onModify;
	private nextTick;
	protected abstract redraw(): any;
	protected drawDirectionLine(): void;
}
declare class Rect extends ShapeBase {
	borderRadius: number;
	protected redraw(): void;
}
declare class Circle extends ShapeBase {
	protected redraw(): void;
}
declare class Star extends ShapeBase {
	points: number;
	innerRadius: number;
	starRotation: number;
	protected redraw(): void;
}
declare class StarBezier extends ShapeBase {
	points: number;
	innerRadius: number;
	starRotation: number;
	protected redraw(): void;
}
export declare const PIXI_TextStyle: {
	align: string[];
	breakWords: string[];
	dropShadow: string[];
	dropShadowAlpha: string[];
	dropShadowAngle: string[];
	dropShadowBlur: string[];
	dropShadowColor: string[];
	dropShadowDistance: string[];
	fill: string[];
	fontFamily: string[];
	fontSize: string[];
	fontStyle: string[];
	fontVariant: string[];
	fontWeight: string[];
	leading: string[];
	letterSpacing: string[];
	lineHeight: string[];
	lineJoin: string[];
	miterLimit: string[];
	padding: string[];
	stroke: string[];
	strokeThickness: string[];
	trim: string[];
	textBaseline: string[];
	whiteSpace: string[];
	wordWrap: string[];
	wordWrapWidth: string[];
};
export declare enum PIXI_BLEND_MODES {
	NORMAL = 0,
	ADD = 1,
	MULTIPLY = 2,
	SCREEN = 3,
	OVERLAY = 4,
	DARKEN = 5,
	LIGHTEN = 6,
	COLOR_DODGE = 7,
	COLOR_BURN = 8,
	HARD_LIGHT = 9,
	SOFT_LIGHT = 10,
	DIFFERENCE = 11,
	EXCLUSION = 12,
	HUE = 13,
	SATURATION = 14,
	COLOR = 15,
	LUMINOSITY = 16,
	NORMAL_NPM = 17,
	ADD_NPM = 18,
	SCREEN_NPM = 19,
	NONE = 20,
	SRC_OVER = 0,
	SRC_IN = 21,
	SRC_OUT = 22,
	SRC_ATOP = 23,
	DST_OVER = 24,
	DST_IN = 25,
	DST_OUT = 26,
	DST_ATOP = 27,
	ERASE = 26,
	SUBTRACT = 28,
	XOR = 29
}
export declare const entityProps: {
	Node: {
		def: typeof PIXI.Container;
		isContainer: boolean;
		props: {
			position: (string | number[])[];
			scale: (string | number[])[];
			anchor: (string | number[])[];
			pivot: (string | number[])[];
			skew: (string | number[])[];
			width: (string | number)[];
			height: (string | number)[];
			alpha: (string | number)[];
			angle: (string | number)[];
			buttonMode: (string | boolean)[];
			interactive: (string | boolean)[];
			interactiveChildren: (string | boolean)[];
			zIndex: (string | number)[];
		};
	};
	Sprite: {
		base: string;
		def: typeof PIXI.Sprite;
		isContainer: boolean;
		props: {
			blendMode: (string | typeof PIXI_BLEND_MODES)[];
			tint: (string | number)[];
			texture: string[];
		};
	};
	Text: {
		base: string;
		def: typeof PIXI.Text;
		isContainer: boolean;
		props: {
			text: string[];
			style: (string | {
				align: string[];
				breakWords: string[];
				dropShadow: string[];
				dropShadowAlpha: string[];
				dropShadowAngle: string[];
				dropShadowBlur: string[];
				dropShadowColor: string[];
				dropShadowDistance: string[];
				fill: string[];
				fontFamily: string[];
				fontSize: string[];
				fontStyle: string[];
				fontVariant: string[];
				fontWeight: string[];
				leading: string[];
				letterSpacing: string[];
				lineHeight: string[];
				lineJoin: string[];
				miterLimit: string[];
				padding: string[];
				stroke: string[];
				strokeThickness: string[];
				trim: string[];
				textBaseline: string[];
				whiteSpace: string[];
				wordWrap: string[];
				wordWrapWidth: string[];
			})[];
		};
	};
	Graphics: {
		base: string;
		def: typeof PIXI.Graphics;
		isContainer: boolean;
		props: {
			tint: (string | number)[];
		};
	};
	ShapeBase: {
		base: string;
		def: typeof ShapeBase;
		isContainer: boolean;
		hidden: boolean;
		props: {
			fillColor: (string | number)[];
			strokeColor: (string | number)[];
			strokeWidth: (string | number)[];
		};
	};
	Rect: {
		base: string;
		def: typeof Rect;
		isContainer: boolean;
		props: {
			borderRadius: (string | number)[];
		};
	};
	Circle: {
		base: string;
		def: typeof Circle;
		isContainer: boolean;
		props: {};
	};
	Star: {
		base: string;
		def: typeof Star;
		isContainer: boolean;
		props: {
			points: (string | number)[];
			innerRadius: string[];
			starRotation: (string | number)[];
		};
	};
	StarBezier: {
		base: string;
		def: typeof StarBezier;
		isContainer: boolean;
		props: {
			points: (string | number)[];
			innerRadius: string[];
			starRotation: (string | number)[];
		};
	};
};

export {};
